// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Alert of type advisory with text content should render an Alert component of type advisory 1`] = `
<Alert
  action={null}
  customColorClass="custom-default-color"
  customIcon={null}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onDismiss={null}
  title=""
  type="advisory"
>
  <ResponsiveElement
    onChange={[Function]}
    responsiveTo="parent"
  >
    <div />
  </ResponsiveElement>
</Alert>
`;

exports[`Alert of type alert with text content should render an Alert component of type alert 1`] = `
<Alert
  action={null}
  customColorClass="custom-default-color"
  customIcon={null}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onDismiss={null}
  title=""
  type="alert"
>
  <ResponsiveElement
    onChange={[Function]}
    responsiveTo="parent"
  >
    <div />
  </ResponsiveElement>
</Alert>
`;

exports[`Alert of type custom with custom title and text content should render an Alert component of type custom 1`] = `
<Alert
  action={null}
  customColorClass="terra-alert-custom-orange-color"
  customIcon={
    <IconHelp
      viewBox="0 0 48 48"
      xmlns="http://www.w3.org/2000/svg"
    />
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onDismiss={null}
  title="Help!"
  type="custom"
>
  <ResponsiveElement
    onChange={[Function]}
    responsiveTo="parent"
  >
    <div />
  </ResponsiveElement>
</Alert>
`;

exports[`Alert of type error with text content should render an Alert component of type error 1`] = `
<Alert
  action={null}
  customColorClass="custom-default-color"
  customIcon={null}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onDismiss={null}
  title=""
  type="error"
>
  <ResponsiveElement
    onChange={[Function]}
    responsiveTo="parent"
  >
    <div />
  </ResponsiveElement>
</Alert>
`;

exports[`Alert of type info with custom title and HTML content should render an Alert component of type info with custom title and HTML content 1`] = `
<Alert
  action={null}
  customColorClass="custom-default-color"
  customIcon={null}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onDismiss={null}
  title="Gettysburg Address"
  type="info"
>
  <ResponsiveElement
    onChange={[Function]}
    responsiveTo="parent"
  >
    <div />
  </ResponsiveElement>
</Alert>
`;

exports[`Alert of type info with text content should render an Alert component of type info 1`] = `
<Alert
  action={null}
  customColorClass="custom-default-color"
  customIcon={null}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onDismiss={null}
  title=""
  type="info"
>
  <ResponsiveElement
    onChange={[Function]}
    responsiveTo="parent"
  >
    <div />
  </ResponsiveElement>
</Alert>
`;

exports[`Alert of type success with an action button text content should render an Alert component of type success with an action button 1`] = `
<Alert
  action={
    <Button
      isBlock={false}
      isCompact={false}
      isDisabled={false}
      isIconOnly={false}
      isReversed={false}
      onClick={[Function]}
      text="Action"
      type="button"
      variant="emphasis"
    />
  }
  customColorClass="custom-default-color"
  customIcon={null}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onDismiss={null}
  title=""
  type="success"
>
  <ResponsiveElement
    onChange={[Function]}
    responsiveTo="parent"
  >
    <div />
  </ResponsiveElement>
</Alert>
`;

exports[`Alert of type success with text content should render an Alert component of type success 1`] = `
<Alert
  action={null}
  customColorClass="custom-default-color"
  customIcon={null}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onDismiss={null}
  title=""
  type="success"
>
  <ResponsiveElement
    onChange={[Function]}
    responsiveTo="parent"
  >
    <div />
  </ResponsiveElement>
</Alert>
`;

exports[`Alert of type warning with text content should render an Alert component of type warning 1`] = `
<Alert
  action={null}
  customColorClass="custom-default-color"
  customIcon={null}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onDismiss={null}
  title=""
  type="warning"
>
  <ResponsiveElement
    onChange={[Function]}
    responsiveTo="parent"
  >
    <div />
  </ResponsiveElement>
</Alert>
`;

exports[`Alert with no props should render a default component 1`] = `
<Alert
  action={null}
  customColorClass="custom-default-color"
  customIcon={null}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onDismiss={null}
  title=""
  type="alert"
>
  <ResponsiveElement
    onChange={[Function]}
    responsiveTo="parent"
  >
    <div />
  </ResponsiveElement>
</Alert>
`;

exports[`Dismissable Alert of type custom with action button, custom title and text content should render an Alert component of type custom with an action button 1`] = `
<Alert
  action={
    <Button
      isBlock={false}
      isCompact={false}
      isDisabled={false}
      isIconOnly={false}
      isReversed={false}
      onClick={[Function]}
      text="Action"
      type="button"
      variant="emphasis"
    />
  }
  customColorClass="terra-alert-custom-orange-color"
  customIcon={
    <IconHelp
      viewBox="0 0 48 48"
      xmlns="http://www.w3.org/2000/svg"
    />
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onDismiss={[Function]}
  title="Help!"
  type="custom"
>
  <ResponsiveElement
    onChange={[Function]}
    responsiveTo="parent"
  >
    <div />
  </ResponsiveElement>
</Alert>
`;

exports[`Dismissible Alert that includes actions section should render an alert component with a dismiss button 1`] = `
<Alert
  action={null}
  customColorClass="custom-default-color"
  customIcon={null}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {},
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": null,
      "now": [Function],
      "onError": [Function],
      "textComponent": "span",
      "timeZone": null,
    }
  }
  onDismiss={[Function]}
  title=""
  type="alert"
>
  <ResponsiveElement
    onChange={[Function]}
    responsiveTo="parent"
  >
    <div />
  </ResponsiveElement>
</Alert>
`;
